stages:
  - build
  - package

variables:
  DOTNET_SDK_IMAGE: mcr.microsoft.com/dotnet/sdk:6.0
  APP_VERSION: ${CI_COMMIT_TAG:-0.0.0}
  APP_NAME: "MyApp"

# Build .NET project
build_project:
  stage: build
  image: ${DOTNET_SDK_IMAGE}
  script:
    - dotnet restore
    - dotnet build --configuration Release
    - dotnet publish --configuration Release --output ./publish
  artifacts:
    paths:
      - ./publish/
    expire_in: 1 day

# Create installer with Inno Setup on Linux
create_inno_installer:
  stage: package
  image: domgho/innodockerlight:latest
  dependencies:
    - build_project
  before_script:
    # Update version in Inno Setup script
    - apt-get update && apt-get install -y sed
    - sed -i "s/#define MyAppVersion \".*\"/#define MyAppVersion \"${APP_VERSION}\"/g" installer/inno/setup.iss
  script:
    - mkdir -p ./Output
    - iscc installer/inno/setup.iss
  artifacts:
    paths:
      - ./Output/*.exe
    expire_in: 1 week

# Create installer with WiX on Linux
create_wix_installer:
  stage: package
  image: ubuntu:latest
  dependencies:
    - build_project
  before_script:
    - apt-get update && apt-get install -y msitools wget sed uuidgen
  script:
    - mkdir -p ./Output
    # Replace placeholder values with actual data
    - sed -i "s/Version=\"[0-9.]*\"/Version=\"${APP_VERSION}.0\"/g" installer/wix/Product.wxs
    - sed -i "s/\$\(var\.PublishDir\)/\.\/publish\//g" installer/wix/Product.wxs
    - wixl -v installer/wix/Product.wxs -o ./Output/${APP_NAME}.msi
  artifacts:
    paths:
      - ./Output/*.msi
    expire_in: 1 week

# # Windows runner examples (uncomment to use)
# # For Inno Setup on Windows
# create_inno_installer_windows:
#   stage: package
#   tags:
#     - windows
#   dependencies:
#     - build_project
#   script:
#     # Replace version in the Inno Setup script
#     - powershell -Command "(Get-Content -Path 'installer\inno\setup.iss') -replace '#define MyAppVersion \".*\"', '#define MyAppVersion \"$env:CI_COMMIT_TAG\"' | Set-Content -Path 'installer\inno\setup.iss'"
#     # Run Inno Setup compiler
#     - '& "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer\inno\setup.iss'
#   artifacts:
#     paths:
#       - .\Output\*.exe
#     expire_in: 1 week
# 
# # For WiX on Windows
# create_wix_installer_windows:
#   stage: package
#   tags:
#     - windows
#   dependencies:
#     - build_project
#   script:
#     # Install WiX Toolset if not already installed
#     - nuget install WiX -Version 3.11.2
#     # Replace version in the WiX script
#     - powershell -Command "(Get-Content -Path 'installer\wix\Product.wxs') -replace 'Version=\"[0-9.]*\"', 'Version=\"$env:CI_COMMIT_TAG.0\"' | Set-Content -Path 'installer\wix\Product.wxs'"
#     # Compile WiX installer
#     - .\WiX.3.11.2\tools\candle.exe -ext WixUIExtension installer\wix\Product.wxs -dPublishDir=publish\
#     - .\WiX.3.11.2\tools\light.exe -ext WixUIExtension Product.wixobj -out .\Output\${APP_NAME}.msi
#   artifacts:
#     paths:
#       - .\Output\*.msi
#     expire_in: 1 week
# 
# # Example with code signing (uncomment and modify to use)
# create_signed_installer:
#   stage: package
#   tags:
#     - windows
#   dependencies:
#     - build_project
#   script:
#     # Create installer
#     - '& "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /Ssigning=true /F"$env:CODE_SIGNING_CERT" /P"$env:CODE_SIGNING_PASSWORD" installer\inno\setup.iss'
#     # Or for WiX MSI signing
#     # - '& "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe" sign /f "$env:CODE_SIGNING_CERT" /p "$env:CODE_SIGNING_PASSWORD" /tr http://timestamp.digicert.com /td sha256 /fd sha256 ".\Output\${APP_NAME}.msi"'
#   artifacts:
#     paths:
#       - .\Output\*.exe
#     expire_in: 1 week
